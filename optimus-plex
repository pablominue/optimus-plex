#!/usr/bin/env python3

"""
This script is the main entry point for the Optimus Plex application.
It checks for active Plex sessions and initiates the media conversion process if no sessions are active.

The script uses environment variables for configuration:
- BASE_PATH: The base directory path for media files
- INPUT_FORMAT: The input format(s) of media files to be converted
- OUTPUT_FORMAT: The desired output format for converted media files
- DELETE_OLD: Whether to delete the original files after conversion
- PLEX_URL: The URL of the Plex server
- PLEX_TOKEN: The authentication token for the Plex server

If multiple input formats are specified, they should be comma-separated in the INPUT_FORMAT environment variable.
"""

import argparse
import os
from src.converter import Converter
from src.api import Plex
from src.utils import PabLog


lg = PabLog(__name__)

BASE_PATH = os.getenv('BASE_PATH')
INPUT_FORMAT = os.getenv('INPUT_FORMAT')
OUTPUT_FORMAT = os.getenv('OUTPUT_FORMAT')
DELETE_OLD = bool(os.getenv('DELETE_OLD'))
PLEX_URL = os.getenv('PLEX_URL')
PLEX_TOKEN = os.getenv('PLEX_TOKEN')

if ',' in INPUT_FORMAT:
    INPUT_FORMAT = list(map(lambda x: str(x).strip(), INPUT_FORMAT.split(',')))

if __name__ == '__main__':
    """
    Main execution block of the script.
    
    This block performs the following steps:
    1. Adds a title to the log
    2. Connects to the Plex server using the provided URL and token
    3. Checks for active sessions
    4. If no active sessions are found, initiates the conversion process
    5. If active sessions are found, logs a warning and does not perform conversion
    
    No parameters are taken as this is the main script.
    
    Returns:
        None. The script performs its operations and logs the results.
    """
    lg.add_title("OPTIMUS PLEX")
    api = Plex().connect_with_token(PLEX_URL, PLEX_TOKEN)
    sessions = api.check_sessions()
    if len(sessions) == 0:
        lg.log.info("No active sessions. Starting Conversion...")
        converter = Converter(output_format=OUTPUT_FORMAT, delete_old=DELETE_OLD)
        converter.run(input_format=INPUT_FORMAT, base_path=BASE_PATH)
        lg.log.info("Conversion Done")
    else:
        lg.log.warning(f"Unable to convert at the moment: {len(sessions)} active sessions found")